import telegram
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, \
    InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, ContextTypes, CommandHandler, MessageHandler, \
    filters, ConversationHandler, CallbackContext, InlineQueryHandler
from telegram.ext.filters import Language

from Task.util import load_prompt, send_text_buttons, send_audio_mess
from gpt import ChatGptService
from util import (load_message, send_text, send_image, show_main_menu,
                  default_callback_handler)

# –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
import os
from dotenv import load_dotenv

# –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
import tempfile
import speech_to_text
# Google Text-to-Speech, –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å
import gtts

# –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Telegram (–≤ —Ç.—á. –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –≤–æ–∑–Ω–∏–∫–∞—é—â–µ–µ –æ—Ç
# ConversationHandler, –≤ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å CallbackQueryHandler)
from warnings import filterwarnings
from telegram.warnings import PTBUserWarning

filterwarnings(action="ignore", message=r".*CallbackQueryHandler", category=PTBUserWarning)


# –î—É–±–ª–∏—Ä—É–µ—Ç —Ç–æ, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –µ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –Ω–µ –≤ –∫–∞–∫–æ–º-–ª–∏–±–æ —Ä–µ–∂–∏–º–µ
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    text = update.message.text
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç —ç—Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = await send_text(update, context, f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}")


# –í—ã—Ö–æ–¥–∏—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞, "–æ—Ç–∂–∏–º–∞–µ—Ç" –∫–Ω–æ–ø–∫—É "–ó–∞–∫–æ–Ω—á–∏—Ç—å" –∏ –≤—ã—Å–≤–µ—á–∏–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await start(update, context)


# –ê–Ω–∞–ª–æ–≥–∏—á–µ–Ω —Ñ—É–Ω–∫—Ü–∏–∏ stop, –Ω–æ –¥–ª—è ConversationHandler
async def stop_hendler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await start(update, context)
    return ConversationHandler.END


# –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'translate': '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç',
        'voice': '–¥–∏–∞–ª–æ–≥ —Å ChatGPT –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ üéô'
    })


# –†–µ–∂–∏–º —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞, –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤ –º–µ–Ω—é 'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†'
async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_image(update, context, 'random')
    message = await send_text(update, context, "–°–µ–∫—É–Ω–¥—É, –¥—É–º–∞—é...")
    promt = load_prompt("random")
    answer = await chat_gpt.send_question(promt, "")
    # message = await message.edit_text(answer)
    await message.delete()
    await send_text_buttons(update, context, answer, {
        'random_more': '–•–æ—á—É –µ—â–µ —Ñ–∞–∫—Ç!',
        'stop': '–ó–∞–∫–æ–Ω—á–∏—Ç—å'
    })


# –†–µ–∂–∏–º "–•–æ—á—É –µ—â–µ —Ñ–∞–∫—Ç" (–ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç random)
async def random_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await random(update, context)


# –†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å —á–∞—Ç–æ–º GPT (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ConversationHandler)
async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = load_message("gpt")
    chat_gpt.set_prompt(load_prompt('gpt'))
    await send_image(update, context, 'gpt')
    await send_text(update, context, text)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ RESPONSE_GPT, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é response_gpt
    return RESPONSE_GPT


# –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ gpt
async def response_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = update.message.text
    res = await chat_gpt.add_message(question)
    await send_text_buttons(update, context, res, {
        'stop_hendler': '–ó–∞–∫–æ–Ω—á–∏—Ç—å'
    })


# –†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ConversationHandler)
async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_image(update, context, "talk")
    talk = load_message("talk")
    # text = await send_text(update, context, talk)
    await send_text_buttons(update, context, talk, {
        'talk_cobain': '–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω',
        'talk_queen': '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ II',
        'talk_hawking': '–î–∂–æ–Ω –¢–æ–ª–∫–∏–µ–Ω',
        'talk_nietzsche': '–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ',
        'talk_tolkien': '–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥'
    })
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ TALK_WITH, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é talk_with
    return TALK_WITH


# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞—Ç—É gpt –ø—Ä–æ–º—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é –∏ –ø—Ä–æ—Å–∏—Ç –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Å—Ç–∏–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
async def talk_with(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    data = update.callback_query.data
    chat_gpt.set_prompt(load_prompt(data))
    greet = await chat_gpt.add_message("–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –∏ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–π—Å—è —Å–æ –º–Ω–æ–π")
    await send_image(update, context, data)
    await send_text(update, context, greet)
    return PERSON_RESPONSE


# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞—Ç—É gpt –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å—Ç–∏–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
async def person_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    answer = await chat_gpt.add_message(text)
    await send_text_buttons(update, context, answer, {
        'stop_hendler': '–ó–∞–∫–æ–Ω—á–∏—Ç—å',
    })


# –†–µ–∂–∏–º –∫–≤–∏–∑–∞, —Ç—Ä–∏ —Ç–µ–º—ã –Ω–∞ –≤—ã–±–æ—Ä —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_gpt.set_prompt(load_prompt('quiz'))
    context.user_data['score'] = 0
    await send_text_buttons(update, context, "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –∫–≤–∏–∑–∞", {
        'quiz_prog': "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        'quiz_math': "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        'quiz_biology': "–ë–∏–æ–ª–æ–≥–∏—è"
    })
    return THEME


# –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Ç—É gpt –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –Ω–µ–≥–æ
async def quiz_theme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    question = await chat_gpt.add_message(update.callback_query.data)
    await send_text(update, context, question)
    return ANSWER


# async def quiz_diff(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     pass


# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å, –ø–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤
async def quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    answer = await chat_gpt.add_message(text)
    if answer == '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!':
        context.user_data['score'] = context.user_data.get('score', 0) + 1
    await send_text_buttons(update, context, answer + '\n\n–í–∞—à —Å—á–µ—Ç: ' + str(
        context.user_data['score']), {
                                'quiz_more': '–ï—â–µ –≤–æ–ø—Ä–æ—Å',
                                'quiz_change': '–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É',
                                'stop_hendler': '–ó–∞–∫–æ–Ω—á–∏—Ç—å',
                            })
    return CHOOSE


# –û—Ç–≤–µ—Ç–Ω—ã–µ –¥–µ—Å—Ç–≤–∏—è –Ω–∞ 'quiz_more' –∏ 'quiz_change'
async def quiz_choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # await update.callback_query.answer()
    if update.callback_query.data == 'quiz_change':
        # "–æ—Ç–∂–∏–º–∞–µ—Ç" –∫–Ω–æ–ø–∫—É '–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', —á—Ç–æ–±—ã –Ω–µ —Å–≤–µ—Ç–∏–ª–∞—Å—å
        await update.callback_query.answer()
        return await quiz(update, context)
    else:
        return THEME


# –†–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º 3 —è–∑—ã–∫–æ–≤
async def translate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_image(update, context, 'translate')
    chat_gpt.set_prompt(load_prompt('translate'))
    await send_text_buttons(update, context, "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç", buttons={
        'translate_en': "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
        'translate_ger': "–ù–µ–º–µ—Ü–∫–∏–π",
        'translate_hrv': "–•–æ—Ä–≤–∞—Ç—Å–∫–∏–π"
    })
    return LANG


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Ç—É gpt –ø—Ä–æ–º—Ç–∞ —Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —è–∑—ã–∫–æ–º, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å
async def language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    question = await chat_gpt.add_message(update.callback_query.data)
    await send_text(update, context, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:')
    return TEXT


# –ü–µ—Ä–µ–≤–æ–¥ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def translated_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    transl_text = await chat_gpt.add_message(text)
    await send_text_buttons(update, context, "–ì–æ—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥:\n" + transl_text, {
        'change_language': '–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫',
        'stop_hendler': '–ó–∞–∫–æ–Ω—á–∏—Ç—å'
    })
    return CHANGE


# –û—Ç–≤–µ—Ç–Ω—ã–µ –¥–µ—Å—Ç–≤–∏—è –Ω–∞ 'change_language': '–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫'
async def change_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    return await translate(update, context)


# –†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å —á–∞—Ç–æ–º gpt –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
async def voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_image(update, context, 'voice')
    await send_text(update, context, '–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É gpt –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º')
    chat_gpt.set_prompt(load_prompt('voice'))
    return VOICE


async def voice_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∞—É–¥–∏–æ-—Ñ–∞–π–ª–æ–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    file = await context.bot.getFile(update.message.voice.file_id)
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ
    temp_file = tempfile.NamedTemporaryFile(delete=False)
    # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ-—Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await file.download_to_drive(temp_file.name)
    # –°—Ç–∞–≤–∏–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
    temp_file.seek(0)
    text = speech_to_text.ogg_to_text(temp_file.read())
    # await send_text(update, context, text)
    answer = await chat_gpt.add_message(text)
    text_to_audio = gtts.gTTS(answer, lang='ru')
    text_to_audio.save(r'C:\Users\Public\PycharmProj\TG_BOT\Task\temp\temp.mp3')
    keyboard = [
        [
            InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="stop_hendler")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_audio_mess(update, context, r'C:\Users\Public\PycharmProj\TG_BOT\Task\temp\temp.mp3', reply_markup)
    os.remove(r'C:\Users\Public\PycharmProj\TG_BOT\Task\temp\temp.mp3')


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤)
load_dotenv()
token_gpt = os.getenv("CHAT_GPT_TOKEN")
token_bot = os.getenv("BOT_TOKEN")
chat_gpt = ChatGptService(token_gpt)
app = ApplicationBuilder().token(token_bot).build()

app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random))

TALK_WITH, PERSON_RESPONSE = range(2)
app.add_handler(ConversationHandler(entry_points=[CommandHandler('talk', talk)], allow_reentry=True,
                                    states={
                                        TALK_WITH: [CallbackQueryHandler(talk_with, '^talk_.*')],
                                        PERSON_RESPONSE: [
                                            MessageHandler(filters.TEXT & ~filters.COMMAND, person_response)]
                                    },
                                    fallbacks=[CallbackQueryHandler(stop_hendler, 'stop_hendler')]
                                    ))
RESPONSE_GPT = 1
app.add_handler(ConversationHandler(entry_points=[CommandHandler('gpt', gpt)], allow_reentry=True,
                                    states={
                                        RESPONSE_GPT: [MessageHandler(filters.TEXT & ~filters.COMMAND, response_gpt)]},
                                    fallbacks=[CallbackQueryHandler(stop_hendler, 'stop_hendler')]
                                    ))

THEME, CHOOSE, ANSWER = range(3)
app.add_handler(ConversationHandler(entry_points=[CommandHandler('quiz', quiz)], allow_reentry=True,
                                    states={
                                        THEME: [CallbackQueryHandler(quiz_theme, '^quiz_.*')],
                                        CHOOSE: [CallbackQueryHandler(quiz_theme, 'quiz_more'),
                                                 CallbackQueryHandler(quiz, 'quiz_change')],
                                        ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, quiz_answer)]
                                    },
                                    fallbacks=[CallbackQueryHandler(stop_hendler, 'stop_hendler')]
                                    ))

LANG, TEXT, CHANGE = range(3)
app.add_handler(ConversationHandler(entry_points=[CommandHandler('translate', translate)], allow_reentry=True,
                                    states={
                                        LANG: [CallbackQueryHandler(language, '^translate_.*')],
                                        TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, translated_text)],
                                        CHANGE: [CallbackQueryHandler(change_language, 'change_language')]},
                                    fallbacks=[CallbackQueryHandler(stop_hendler, 'stop_hendler')]
                                    ))

VOICE = 1
app.add_handler(ConversationHandler(entry_points=[CommandHandler('voice', voice)], allow_reentry=True,
                                    states={
                                        TEXT: [MessageHandler(filters.VOICE, voice_mode)]},
                                    fallbacks=[CallbackQueryHandler(stop_hendler, 'stop_hendler')]
                                    ))

app.add_handler(CallbackQueryHandler(stop, 'stop'))
app.add_handler(CallbackQueryHandler(random_more, '^random_.*'))
app.add_handler(CallbackQueryHandler(default_callback_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

app.run_polling()
